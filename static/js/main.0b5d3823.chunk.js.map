{"version":3,"sources":["App.js","Cash.js","serviceWorker.js","index.js"],"names":["App","location","useLocation","React","useState","quantity","setQuantity","maximumLoss","setMaximumLoss","maximumProfit","setMaximumProfit","coBasket","setCoBasket","boBasket","setBoBasket","moBasket","setMoBasket","buyOrSell","setBuyOrSell","searchParams","URLSearchParams","search","initialState","fields","setValues","event","idOrName","target","type","name","id","value","useFormFields","capital","get","localStorage","getItem","entryPrice","targetPrice","slPerTrade","stopLoss","tradingSymbol","handleFieldChange","calculateQuantity","e","preventDefault","maxLoss","Math","abs","round","maxProfit","console","log","onBuyIntraday","setItem","useEffect","ltp","bos","sob","stoploss","squareoff","Number","toFixed","co","variety","tradingsymbol","exchange","transaction_type","order_type","product","price","parseFloat","trigger_price","readonly","bo","trailing_stoploss","mo","push","Container","className","Row","Col","Badge","variant","Form","onSubmit","Group","as","Label","Control","placeholder","size","autoFocus","autoComplete","onChange","required","method","action","JSON","stringify","Button","Cash","loBasket","setLoBasket","setEntryPrice","setTargetPrice","slPrice","setSlPrice","setStopLoss","setTradingSymbol","risk","riskPC","targetPC","zerodhaId","zerodhaIds","fetch","then","response","text","getLTP","lo","targetOrder","options","stocks","o","step","Boolean","window","hostname","match","ReactDOM","render","StrictMode","exact","path","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"spTAgXeA,MA1Vf,WAEE,IAAMC,EAAWC,cAFJ,EAGmBC,IAAMC,SAAS,GAHlC,mBAGNC,EAHM,KAGIC,EAHJ,OAIyBH,IAAMC,SAAS,GAJxC,mBAING,EAJM,KAIOC,EAJP,OAK6BL,IAAMC,SAAS,GAL5C,mBAKNK,EALM,KAKSC,EALT,OAMmBP,IAAMC,SAAS,IANlC,mBAMNO,EANM,KAMIC,EANJ,OAOmBT,IAAMC,SAAS,IAPlC,mBAONS,EAPM,KAOIC,EAPJ,OAQmBX,IAAMC,SAAS,IARlC,mBAQNW,EARM,KAQIC,EARJ,OASqBb,IAAMC,SAAS,OATpC,mBASNa,EATM,KASKC,EATL,KAWPC,EAAe,IAAIC,gBAAgBnB,EAASoB,QAXrC,EAhBR,SAAuBC,GAAe,IAAD,EACdnB,IAAMC,SAASkB,GADD,mBACnCC,EADmC,KAC3BC,EAD2B,KAa1C,MAAO,CAACD,EAVR,SAAsBE,GACpB,IAAMC,EACkB,UAAtBD,EAAME,OAAOC,KAAmBH,EAAME,OAAOE,KAAOJ,EAAME,OAAOG,GAEnEN,EAAU,2BACLD,GADI,kBAENG,EAAWD,EAAME,OAAOI,WAmBOC,CAAc,CAChDC,QAASd,EAAae,IAAI,MAAQC,aAAaC,QAAQ,YAAc,IACrEC,WAAYlB,EAAae,IAAI,MAAQC,aAAaC,QAAQ,eAAiB,EAC3EE,YAAanB,EAAae,IAAI,MAAQC,aAAaC,QAAQ,gBAAkB,EAC7EG,WAAYpB,EAAae,IAAI,SAAWC,aAAaC,QAAQ,eAAiB,EAC9EI,SAAUrB,EAAae,IAAI,OAASC,aAAaC,QAAQ,aAAe,EACxEK,cAAetB,EAAae,IAAI,MAAQC,aAAaC,QAAQ,kBAAoB,KAlBtE,mBAYNb,EAZM,KAYEmB,EAZF,KAqBb,SAASC,EAAkBC,GAKzB,GAJIA,GACFA,EAAEC,iBAGAtB,EAAOU,SAAWV,EAAOc,YAAcd,EAAOgB,YAAchB,EAAOiB,SAAU,CAE/E,IAAMM,EAAYvB,EAAOU,QAAUV,EAAOgB,WAAc,IAClDC,EAAWO,KAAKC,IAAKzB,EAAOc,WAAad,EAAOiB,UAChDnC,EAAY0C,KAAKE,MAAMH,EAAUN,GACjCU,EAAY3B,EAAOe,YAAc,GAAKf,EAAOe,YAAcf,EAAOc,YAAchC,EAAW,EAEjG8C,QAAQC,IAAI,CAACN,UAASI,YAAWV,WAAUnC,aAC3CC,EAAYD,GACZG,EAAesC,GACfpC,EAAiBwC,IAIrB,SAASG,EAAcT,GACrBD,IAEAR,aAAamB,QAAQ,UAAW/B,EAAOU,SACvCE,aAAamB,QAAQ,aAAc/B,EAAOc,YAC1CF,aAAamB,QAAQ,cAAe/B,EAAOe,aAC3CH,aAAamB,QAAQ,aAAc/B,EAAOgB,YAC1CJ,aAAamB,QAAQ,WAAY/B,EAAOiB,UACxCL,aAAamB,QAAQ,gBAAiB/B,EAAOkB,eA6G/C,OAnFAtC,IAAMoD,WAAU,WACd,IAnBqBC,EAmBfC,EAAOlC,EAAOiB,SAAWjB,EAAOc,WAAc,MAAQ,OACtDqB,EAAc,QAARD,EAAgB,OAAS,MAKrC,GAHAvC,EAAauC,GACbd,IAEIpB,EAAOkB,cAAe,CACxB,IAAMkB,EAAWZ,KAAKC,IAAKzB,EAAOc,WAAad,EAAOiB,UAChDoB,EAAYC,OAAkB,IAAXF,GAAgBG,QAAQ,GAE3CC,EAAK,CAAC,CACVC,QAAS,KACTC,cAAe1C,EAAOkB,cACtByB,SAAU,MACVC,iBAAkBV,EAClBW,WAAY,QACZC,QAAS,MACTC,MAAOC,WAAWhD,EAAOc,YACzBhC,SAAUA,EACVsD,SAAUA,EACVa,cAAeD,WAAWhD,EAAOiB,UACjCiC,UAAU,IAEZ7D,EAAYmD,GAEZ,IAAMW,EAAK,CAAC,CACVT,cAAe1C,EAAOkB,cACtByB,SAAU,MACVC,iBAAkBV,EAClBW,WAAY,QACZC,QAAS,MACTC,MAAOC,WAAWhD,EAAOc,YACzBhC,SAAUA,EACV2D,QAAS,KACTL,SAAUA,EACVC,UAAWW,WAAWX,GACtBe,mBAvDiBnB,EAuDgBjC,EAAOc,WAtDxCmB,EAAM,IACD,EACEA,EAAM,IACR,IACEA,EAAM,IACR,EACEA,EAAM,IACR,IACEA,EAAM,IACR,EACEA,EAAM,IACR,EAEA,GA0CLgB,cAAeD,WAAWhD,EAAOiB,UACjCiC,UAAU,IAEZ3D,EAAY4D,GAEZ,IAAME,EAAK,CACT,CACEV,SAAU,MACVD,cAAe1C,EAAOkB,cACtBpC,SAAUA,EACV8D,iBAAkBV,EAClBY,QAAS,MACTD,WAAY,OACZE,MAAOC,WAAWhD,EAAOc,YACzBmC,cAAeD,WAAWhD,EAAOc,aAEnC,CACE4B,cAAe1C,EAAOkB,cACtByB,SAAU,MACVC,iBAAkBT,EAClBU,WAAY,OACZC,QAAS,MACTC,MAAOC,WAAWhD,EAAOiB,UACzBnC,SAAUA,EACVmE,cAAeD,WAAWhD,EAAOiB,YAGjCjB,EAAOe,YAAc,GACvBsC,EAAGC,KAAK,CACNX,SAAU,MACVD,cAAe1C,EAAOkB,cACtBpC,SAAUA,EACV8D,iBAAkBT,EAClBW,QAAS,MACTD,WAAY,QACZE,MAAOC,WAAWhD,EAAOe,aACzBkC,cAAeD,WAAWhD,EAAOe,eAGrCtB,EAAY4D,GAEZzB,QAAQC,IAAI,CAACW,KAAIW,KAAIE,UAEtB,CAACrD,EAAOkB,cAAelB,EAAOc,WAAYd,EAAOiB,SAAUnC,EAAUkB,EAAOU,QAASV,EAAOgB,WAAYhB,EAAOe,cAGhH,kBAACwC,EAAA,EAAD,CAAWC,UAAU,OACnB,kBAACC,EAAA,EAAD,CAAKD,UAAU,sBACb,kBAACE,EAAA,EAAD,KAAM5E,IAER,kBAAC2E,EAAA,EAAD,CAAKD,UAAU,kBACb,kBAACE,EAAA,EAAD,CAAKF,UAAU,eACb,kBAACG,EAAA,EAAD,CAAOC,QAAQ,SAASJ,UAAU,YAAlC,SAAmD,6BAAK,gCAASxE,KAChEgB,EAAOe,aAAef,EAAOe,YAAc,GAC1C,oCACE,kBAAC4C,EAAA,EAAD,CAAOC,QAAQ,UAAUJ,UAAU,YAAnC,WAAsD,6BAAK,gCAASlB,OAAOpD,GAAeqD,QAAQ,MAClG,kBAACoB,EAAA,EAAD,CAAOC,QAAQ,UAAUJ,UAAU,YAAnC,QAAmD,6BAAK,gCAASlB,OAAOpD,EAAcF,GAAauD,QAAQ,SAKnH,kBAACsB,EAAA,EAAD,CAAMC,SAAU1C,GACd,kBAACyC,EAAA,EAAKJ,IAAN,KACE,kBAACI,EAAA,EAAKE,MAAN,CAAYC,GAAIN,KACd,kBAACG,EAAA,EAAKI,MAAN,gBACA,kBAACJ,EAAA,EAAKK,QAAN,CACEC,YAAY,UACZC,KAAK,KACLC,WAAS,EACTC,aAAa,MACbjE,KAAK,SACLE,GAAG,UACHC,MAAOR,EAAOU,QACd6D,SAAUpD,EACVqD,UAAQ,KAIZ,kBAACX,EAAA,EAAKE,MAAN,CAAYC,GAAIN,KACd,kBAACG,EAAA,EAAKI,MAAN,8BACA,kBAACJ,EAAA,EAAKK,QAAN,CACEC,YAAY,iBACZC,KAAK,KACLC,WAAS,EACTC,aAAa,MACbjE,KAAK,SACLE,GAAG,aACHC,MAAOR,EAAOgB,WACduD,SAAUpD,EACVqD,UAAQ,MAKd,kBAACX,EAAA,EAAKJ,IAAN,KACE,kBAACI,EAAA,EAAKE,MAAN,CAAYC,GAAIN,KACd,kBAACG,EAAA,EAAKI,MAAN,kBACA,kBAACJ,EAAA,EAAKK,QAAN,CACEC,YAAY,YACZC,KAAK,KACLC,WAAS,EACTC,aAAa,MACbjE,KAAK,SACLE,GAAG,WACHC,MAAOR,EAAOiB,SACdsD,SAAUpD,EACVqD,UAAQ,KAIZ,kBAACX,EAAA,EAAKE,MAAN,CAAYC,GAAIN,KACd,kBAACG,EAAA,EAAKI,MAAN,oBACA,kBAACJ,EAAA,EAAKK,QAAN,CACEC,YAAY,cACZC,KAAK,KACLC,WAAS,EACTC,aAAa,MACbjE,KAAK,SACLE,GAAG,aACHC,MAAOR,EAAOc,WACdyD,SAAUpD,EACVqD,UAAQ,MAKd,kBAACX,EAAA,EAAKJ,IAAN,KAEA,kBAACI,EAAA,EAAKE,MAAN,CAAYC,GAAIN,KACZ,kBAACG,EAAA,EAAKI,MAAN,eACA,kBAACJ,EAAA,EAAKK,QAAN,CACEC,YAAY,eACZC,KAAK,KACLC,WAAS,EACTC,aAAa,MACbjE,KAAK,SACLE,GAAG,cACHC,MAAOR,EAAOe,YACdwD,SAAUpD,EACVqD,UAAQ,KAIZ,kBAACX,EAAA,EAAKE,MAAN,CAAYC,GAAIN,KACd,kBAACG,EAAA,EAAKI,MAAN,uBACA,kBAACJ,EAAA,EAAKK,QAAN,CACEC,YAAY,YACZC,KAAK,KACLC,WAAS,EACTC,aAAa,MACbjE,KAAK,OACLE,GAAG,gBACHC,MAAOR,EAAOkB,cACdqD,SAAUpD,EACVqD,UAAQ,OAUhB,6BACA,0BACEC,OAAO,OACPlE,GAAG,gBACHmE,OAAO,0CACPZ,SAAUhC,EACV0B,UAAU,sBAEV,2BAAOnD,KAAK,SAASC,KAAK,UAAUE,MAAM,qBAC1C,kBAACqD,EAAA,EAAKK,QAAN,CACE7D,KAAK,SACLE,GAAG,WACHD,KAAK,OACLE,MAAOmE,KAAKC,UAAUxF,GACtBoF,UAAQ,IAEV,kBAACK,EAAA,EAAD,CAAQT,KAAK,KAAKR,QAAuB,QAAdlE,EAAsB,UAAY,SAAUW,KAAK,UACzEX,EADH,iBAKF,0BACE+E,OAAO,OACPlE,GAAG,gBACHmE,OAAO,0CACPZ,SAAUhC,EACV0B,UAAU,sBAEV,2BAAOnD,KAAK,SAASC,KAAK,UAAUE,MAAM,qBAC1C,kBAACqD,EAAA,EAAKK,QAAN,CACE7D,KAAK,SACLE,GAAG,WACHD,KAAK,OACLE,MAAOmE,KAAKC,UAAUtF,GACtBkF,UAAQ,IAEV,kBAACK,EAAA,EAAD,CAAQT,KAAK,KAAKR,QAAuB,QAAdlE,EAAsB,UAAY,SAAUW,KAAK,UACzEX,EADH,4BAKF,0BACE+E,OAAO,OACPlE,GAAG,gBACHmE,OAAO,0CACPZ,SAAUhC,EACV0B,UAAU,sBAEV,2BAAOnD,KAAK,SAASC,KAAK,UAAUE,MAAM,qBAC1C,kBAACqD,EAAA,EAAKK,QAAN,CACE7D,KAAK,SACLE,GAAG,WACHD,KAAK,OACLE,MAAOmE,KAAKC,UAAUpF,GACtBgF,UAAQ,IAEV,kBAACK,EAAA,EAAD,CAAQT,KAAK,KAAKR,QAAuB,QAAdlE,EAAsB,UAAY,SAAUW,KAAK,UACzEX,EADH,oB,wBCIOoF,MAlUf,WAEI,IAAMpG,EAAWC,cAFL,EAGoBC,IAAMC,SAAS,GAHnC,mBAGLC,EAHK,KAGKC,EAHL,OAI0BH,IAAMC,SAAS,GAJzC,mBAILG,EAJK,KAIQC,EAJR,OAK8BL,IAAMC,SAAS,GAL7C,mBAKLK,EALK,KAKUC,EALV,OAMoBP,IAAMC,SAAS,IANnC,mBAMLO,EANK,KAMKC,EANL,OAOoBT,IAAMC,SAAS,IAPnC,mBAOKU,GAPL,aAQoBX,IAAMC,SAAS,IARnC,mBAQKY,GARL,aASoBb,IAAMC,SAAS,IATnC,mBASLkG,EATK,KASKC,EATL,OAUsBpG,IAAMC,SAAS,OAVrC,mBAULa,EAVK,KAUMC,EAVN,KAYNC,EAAe,IAAIC,gBAAgBnB,EAASoB,QAZtC,EAcwBlB,IAAMC,SAASe,EAAae,IAAI,MAAQC,aAAaC,QAAQ,eAAiB,GAdtG,mBAcLC,EAdK,KAcOmE,EAdP,OAe0BrG,IAAMC,SAASe,EAAae,IAAI,MAAQC,aAAaC,QAAQ,gBAAkB,GAfzG,mBAeLE,EAfK,KAeQmE,EAfR,OAgBkBtG,IAAMC,SAASe,EAAae,IAAI,MAAQC,aAAaC,QAAQ,YAAc,GAhB7F,mBAgBLsE,GAhBK,KAgBIC,GAhBJ,QAiBoBxG,IAAMC,SAASe,EAAae,IAAI,OAASC,aAAaC,QAAQ,aAAe,GAjBjG,qBAiBLI,GAjBK,MAiBKoE,GAjBL,SAmB8BzG,IAAMC,SAASe,EAAae,IAAI,MAAQC,aAAaC,QAAQ,kBAAoB,IAnB/G,qBAmBLK,GAnBK,MAmBUoE,GAnBV,SAoBY1G,IAAMC,SAASe,EAAae,IAAI,MAAQC,aAAaC,QAAQ,SAAW,KApBpF,qBAoBL0E,GApBK,gBAqBqB3G,IAAMC,SAASe,EAAae,IAAI,QAAUC,aAAaC,QAAQ,WAAa,KArBjG,qBAqBL2E,GArBK,gBAsBoB5G,IAAMC,SAASe,EAAae,IAAI,QAAUC,aAAaC,QAAQ,aAAe,IAtBlG,qBAsBL4E,GAtBK,MAyBZ,SAASrE,GAAkBC,GAKvB,GAJIA,GACAA,EAAEC,iBAGFR,EAAY,CACZ,IAAMqE,EAAU7C,OAAOxB,GAAc,EAAI0E,GAAO,MAAMjD,QAAQ,GACxDxB,EAAcuB,OAAOxB,GAAc,EAAI2E,GAAS,MAAMlD,QAAQ,GAC9DtB,EAAWqB,OAAOxB,EAAaqE,GAAS5C,QAAQ,GAChDnC,EAASkC,OAAOvB,EAAcD,GAAYyB,QAAQ,GAClDzD,EAAWwD,OAAOd,KAAKE,MAAM,IAAMT,IAAWsB,QAAQ,GAEtDhB,EAAUe,OAAOrB,EAAWnC,GAAUyD,QAAQ,GAC9CZ,EAAYW,OAAOlC,EAAStB,GAAUyD,QAAQ,GACpDtD,EAAesC,GACfpC,EAAiBwC,GAEjB5C,EAAYD,GACZsG,GAAWD,GACXD,EAAenE,GACfsE,GAAYpE,GACZW,QAAQC,IAAI,CAACf,aAAYqE,UAASpE,cAAajC,WAAUyC,UAASI,eAK1E,SAASG,GAAcT,GACnBD,KAEAR,aAAamB,QAAQ,aAAcjB,GACnCF,aAAamB,QAAQ,UAAWoD,IAChCvE,aAAamB,QAAQ,cAAehB,GACpCH,aAAamB,QAAQ,gBAAiBb,IACtCN,aAAamB,QAAQ,OAAQwD,IAC7B3E,aAAamB,QAAQ,cAAe/C,GACpC4B,aAAamB,QAAQ,gBAAiB7C,GAwJ1C,OApNY,MAiEZN,IAAMoD,WAAU,WACZJ,QAAQC,IAAI,CAACX,mBACTA,IAWR,WACI,IAAMwE,EAAYC,EAAWzE,IAC7B0E,MAAM,6BAAD,OAA8BF,IAClCG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAA5D,GAAG,OAAIgD,EAAchD,MAdvB+D,KAEL,CAAC9E,KAEJtC,IAAMoD,WAAU,WACZZ,OACD,CAACN,IA6BJlC,IAAMoD,WAAU,WACZ,IAnBmBC,EAmBbC,GAAQiD,IAAWrE,EAAc,MAAQ,OACzCqB,EAAc,QAARD,EAAgB,OAAS,MAKrC,GAHAvC,EAAauC,GACbd,KAEIF,GAAe,CACf,IAAMkB,EAAWZ,KAAKC,IAAKX,EAAaG,IAClCoB,EAAYC,OAAkB,IAAXF,GAAgBG,QAAQ,GAE3CC,EAAK,CAAC,CACRC,QAAS,KACTC,cAAexB,GACfyB,SAAU,MACVC,iBAAkBV,EAClBW,WAAY,QACZC,QAAS,MACTC,MAAOC,WAAWlC,GAClBhC,UAAWA,EACXsD,UAAWnB,GACXgC,cAAeD,WAAWmC,IAC1BjC,UAAU,IAEd7D,EAAYmD,GAEZ,IAAMW,EAAK,CAAC,CACRT,cAAexB,GACfyB,SAAU,MACVC,iBAAkBV,EAClBW,WAAY,QACZC,QAAS,MACTC,MAAOC,WAAWlC,GAClBhC,UAAWA,EACX2D,QAAS,KACTL,UAAWA,EACXC,UAAWW,WAAWX,GACtBe,mBAvDWnB,EAuDsBnB,EAtDrCmB,EAAM,IACC,EACAA,EAAM,IACN,IACAA,EAAM,IACN,EACAA,EAAM,IACN,IACAA,EAAM,IACN,EACAA,EAAM,IACN,EAEA,GA0CHgB,cAAeD,WAAW/B,IAC1BiC,UAAU,IAEd3D,EAAY4D,GAEZ,IAAM8C,EAAK,CACP,CACItD,SAAU,MACVD,cAAexB,GACfpC,UAAWA,EACX8D,iBAAkBV,EAClBY,QAAS,MACTD,WAAY,QACZE,MAAOC,WAAWlC,IAGtB,CACI4B,cAAexB,GACfyB,SAAU,MACVC,iBAAkBT,EAClBU,WAAY,OACZC,QAAS,MACTC,MAAOC,WAAWmC,IAClBrG,UAAWA,EACXmE,cAAeD,WAAWmC,MAI5B9B,EAAK,CACP,CACIV,SAAU,MACVD,cAAexB,GACfpC,UAAWA,EACX8D,iBAAkBV,EAClBY,QAAS,MACTD,WAAY,OACZE,MAAOC,WAAWlC,GAClBmC,cAAeD,WAAWlC,IAE9B,CACI4B,cAAexB,GACfyB,SAAU,MACVC,iBAAkBT,EAClBU,WAAY,OACZC,QAAS,MACTC,MAAOC,WAAW/B,IAClBnC,UAAWA,EACXmE,cAAeD,WAAW/B,MAGlC,GAAIF,EAAc,EAAG,CACjB,IAAMmF,EAAc,CAChBvD,SAAU,MACVD,cAAexB,GACfpC,UAAWA,EACX8D,iBAAkBT,EAClBW,QAAS,MACTD,WAAY,QACZE,MAAOC,WAAWjC,GAClBkC,cAAeD,WAAWjC,IAE9BsC,EAAGC,KAAK4C,GACRD,EAAG3C,KAAK4C,GAEZzG,EAAY4D,GACZ2B,EAAYiB,GAEZrE,QAAQC,IAAI,CAACoE,KAAIzD,UAEtB,CAAC1B,EAAYqE,GAASpE,EAAaE,KAGlC,kBAACsC,EAAA,EAAD,CAAWC,UAAU,QACjB,kBAACC,EAAA,EAAD,CAAKD,UAAU,sBACX,kBAACE,EAAA,EAAD,gBAEJ,kBAACD,EAAA,EAAD,CAAKD,UAAU,kBACX,kBAACE,EAAA,EAAD,CAAKF,UAAU,eACX,kBAACG,EAAA,EAAD,CAAOC,QAAQ,SAASJ,UAAU,YAAlC,SAAmD,6BAAK,gCAASxE,EAAT,KAAwBmG,GAAxB,OACvDpE,GAAeA,EAAc,GAC1B,oCACI,kBAAC4C,EAAA,EAAD,CAAOC,QAAQ,UAAUJ,UAAU,YAAnC,WAAsD,6BAAK,gCAASlB,OAAOpD,GAAeqD,QAAQ,GAAvC,KAA6CxB,EAA7C,OAC3D,kBAAC4C,EAAA,EAAD,CAAOC,QAAQ,UAAUJ,UAAU,YAAnC,QAAmD,6BAAK,gCAASlB,OAAOpD,EAAgBF,GAAauD,QAAQ,SAO7H,kBAACsB,EAAA,EAAD,CAAMC,SAAU1C,IACZ,kBAACyC,EAAA,EAAKJ,IAAN,KACI,kBAACI,EAAA,EAAKE,MAAN,CAAYC,GAAIN,KACZ,kBAACG,EAAA,EAAKI,MAAN,uBACA,kBAAC,IAAD,CACIkC,QAASC,EACT7F,GAAG,gBAEHgE,SAAU,SAAA8B,GAAC,OAAIf,GAAiBe,EAAE7F,WAI1C,kBAACqD,EAAA,EAAKE,MAAN,CAAYC,GAAIN,KACZ,kBAACG,EAAA,EAAKI,MAAN,oBACA,kBAACJ,EAAA,EAAKK,QAAN,CACIC,YAAY,cACZC,KAAK,KACLC,WAAS,EACTC,aAAa,MACbjE,KAAK,SACLE,GAAG,aACHC,MAAOM,EACPyD,SAAU,SAAAlD,GAAC,OAAKA,EAAEjB,OAAOI,OAASyE,EAAc5D,EAAEjB,OAAOI,QACzD8F,KAAK,MACL9B,UAAQ,KAIhB,kBAACX,EAAA,EAAKE,MAAN,CAAYC,GAAIN,KACZ,kBAACG,EAAA,EAAKI,MAAN,iBACA,kBAACJ,EAAA,EAAKK,QAAN,CACIC,YAAY,WACZC,KAAK,KACLC,WAAS,EACTC,aAAa,MACbjE,KAAK,SACLE,GAAG,WACHC,MAAO1B,EACPyF,SAAU,SAAAlD,GAAC,OAAItC,EAAYsC,EAAEjB,OAAOI,QACpCgE,UAAQ,OAKhB,kBAACd,EAAA,EAAD,KACI,0BACIe,OAAO,OACPlE,GAAG,gBACHmE,OAAO,0CACPZ,SAAUhC,GACV0B,UAAU,kBAEV,2BAAOnD,KAAK,SAASC,KAAK,UAAUE,MAAM,qBAC1C,kBAACqD,EAAA,EAAKK,QAAN,CACI7D,KAAK,SACLE,GAAG,WACHD,KAAK,OACLE,MAAOmE,KAAKC,UAAUG,GACtBP,UAAQ,IAEZ,kBAACK,EAAA,EAAD,CAAQrB,UAAU,MAAMY,KAAK,KAAKR,QAAuB,QAAdlE,EAAsB,UAAY,SAAUW,KAAK,UAA5F,UAKJ,0BACIoE,OAAO,OACPlE,GAAG,gBACHmE,OAAO,0CACPZ,SAAUhC,GACV0B,UAAU,kBAEV,2BAAOnD,KAAK,SAASC,KAAK,UAAUE,MAAM,qBAC1C,kBAACqD,EAAA,EAAKK,QAAN,CACI7D,KAAK,SACLE,GAAG,WACHD,KAAK,OACLE,MAAOmE,KAAKC,UAAUxF,GACtBoF,UAAQ,IAEZ,kBAACK,EAAA,EAAD,CAAQrB,UAAU,MAAMY,KAAK,KAAKR,QAAuB,QAAdlE,EAAsB,UAAY,SAAUW,KAAK,UAA5F,aC9URkG,QACW,cAA7BC,OAAO9H,SAAS+H,UAEe,UAA7BD,OAAO9H,SAAS+H,UAEhBD,OAAO9H,SAAS+H,SAASC,MACvB,2DCLNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,QACV,kBAAC,EAAD,UAQVC,SAASC,eAAe,SDsGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5F,QAAQ4F,MAAMA,EAAMC,c","file":"static/js/main.0b5d3823.chunk.js","sourcesContent":["import React from 'react';\nimport { useLocation } from 'react-router-dom';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Form, Row, Col, Button, Container, Badge } from 'react-bootstrap';\n\nexport function useFormFields(initialState) {\n  const [fields, setValues] = React.useState(initialState);\n\n  function setFormField(event) {\n    const idOrName =\n      event.target.type === \"radio\" ? event.target.name : event.target.id;\n\n    setValues({\n      ...fields,\n      [idOrName]: event.target.value,\n    });\n  }\n\n  return [fields, setFormField];\n}\n\nfunction App() {\n\n  const location = useLocation();\n  const [quantity, setQuantity] = React.useState(0);\n  const [maximumLoss, setMaximumLoss] = React.useState(0);\n  const [maximumProfit, setMaximumProfit] = React.useState(0);\n  const [coBasket, setCoBasket] = React.useState([]);\n  const [boBasket, setBoBasket] = React.useState([]);\n  const [moBasket, setMoBasket] = React.useState([]);\n  const [buyOrSell, setBuyOrSell] = React.useState('BUY');\n\n  const searchParams = new URLSearchParams(location.search);\n  const [fields, handleFieldChange] = useFormFields({\n    capital: searchParams.get(\"c\") || localStorage.getItem(\"capital\") || 200000,\n    entryPrice: searchParams.get(\"e\") || localStorage.getItem(\"entryPrice\") || 0,\n    targetPrice: searchParams.get(\"t\") || localStorage.getItem(\"targetPrice\") || 0,\n    slPerTrade: searchParams.get(\"slpt\") || localStorage.getItem(\"slPerTrade\") || 2,\n    stopLoss: searchParams.get(\"sl\") || localStorage.getItem(\"stopLoss\") || 0,\n    tradingSymbol: searchParams.get(\"n\") || localStorage.getItem(\"tradingSymbol\") || \"\",\n  });\n\n  function calculateQuantity(e) {\n    if (e) {\n      e.preventDefault();\n    }\n\n    if (fields.capital && fields.entryPrice && fields.slPerTrade && fields.stopLoss) {\n      \n      const maxLoss = ((fields.capital * fields.slPerTrade) / 100);\n      const stopLoss = Math.abs((fields.entryPrice - fields.stopLoss));\n      const quantity =  Math.round(maxLoss / stopLoss);\n      const maxProfit = fields.targetPrice > 0 ? (fields.targetPrice - fields.entryPrice) * quantity : 0;\n      \n      console.log({maxLoss, maxProfit, stopLoss, quantity});\n      setQuantity(quantity);\n      setMaximumLoss(maxLoss);\n      setMaximumProfit(maxProfit);\n    }\n  }\n\n  function onBuyIntraday(e) {\n    calculateQuantity();\n    // TODO: save data to local storage\n    localStorage.setItem('capital', fields.capital);\n    localStorage.setItem('entryPrice', fields.entryPrice);\n    localStorage.setItem('targetPrice', fields.targetPrice);\n    localStorage.setItem('slPerTrade', fields.slPerTrade);\n    localStorage.setItem('stopLoss', fields.stopLoss);\n    localStorage.setItem('tradingSymbol', fields.tradingSymbol);\n  }\n\n  // TODO: Finish resetting form\n  function onResetForm(e) {\n    \n  }\n\n  function getTrailingSl(ltp) {\n    if (ltp < 100) {\n      return 1;\n    } else if (ltp < 200) {\n      return 1.5;\n    } else if (ltp < 400) {\n      return 2;\n    } else if (ltp < 600) {\n      return 2.5;\n    } else if (ltp < 800) {\n      return 3;\n    } else if (ltp < 1000) {\n      return 4;\n    } else {\n      return 5;\n    }\n  }\n\n  React.useEffect(() => {\n    const bos = (fields.stopLoss < fields.entryPrice) ? 'BUY' : 'SELL';\n    const sob = bos === 'BUY' ? 'SELL' : 'BUY';\n\n    setBuyOrSell(bos);\n    calculateQuantity();\n\n    if (fields.tradingSymbol) {\n      const stoploss = Math.abs((fields.entryPrice - fields.stopLoss));\n      const squareoff = Number(stoploss * 1.5).toFixed(1);\n\n      const co = [{\n        variety: 'co',\n        tradingsymbol: fields.tradingSymbol,\n        exchange: 'NSE',\n        transaction_type: bos,\n        order_type: 'LIMIT',\n        product: 'MIS',\n        price: parseFloat(fields.entryPrice),\n        quantity: quantity,\n        stoploss: stoploss,\n        trigger_price: parseFloat(fields.stopLoss),\n        readonly: true,\n      }];\n      setCoBasket(co);\n\n      const bo = [{\n        tradingsymbol: fields.tradingSymbol,\n        exchange: 'NSE',\n        transaction_type: bos,\n        order_type: 'LIMIT',\n        product: 'MIS',\n        price: parseFloat(fields.entryPrice),\n        quantity: quantity,\n        variety: 'bo',\n        stoploss: stoploss,\n        squareoff: parseFloat(squareoff),\n        trailing_stoploss: getTrailingSl(fields.entryPrice),\n        trigger_price: parseFloat(fields.stopLoss),\n        readonly: true,\n      }];\n      setBoBasket(bo);\n\n      const mo = [\n        {\n          exchange: 'NSE',\n          tradingsymbol: fields.tradingSymbol,\n          quantity: quantity,\n          transaction_type: bos,\n          product: 'MIS',\n          order_type: \"SL-M\",\n          price: parseFloat(fields.entryPrice),\n          trigger_price: parseFloat(fields.entryPrice),\n        },\n        {\n          tradingsymbol: fields.tradingSymbol,\n          exchange: 'NSE',\n          transaction_type: sob,\n          order_type: 'SL-M',\n          product: 'MIS',\n          price: parseFloat(fields.stopLoss),\n          quantity: quantity,\n          trigger_price: parseFloat(fields.stopLoss),\n        },\n      ];\n      if (fields.targetPrice > 0) {\n        mo.push({\n          exchange: 'NSE',\n          tradingsymbol: fields.tradingSymbol,\n          quantity: quantity,\n          transaction_type: sob,\n          product: 'MIS',\n          order_type: \"LIMIT\",\n          price: parseFloat(fields.targetPrice),\n          trigger_price: parseFloat(fields.targetPrice),\n        });\n      }\n      setMoBasket(mo);\n\n      console.log({co, bo, mo});\n    }\n  }, [fields.tradingSymbol, fields.entryPrice, fields.stopLoss, quantity, fields.capital, fields.slPerTrade, fields.targetPrice]);\n\n  return (\n    <Container className=\"App\">\n      <Row className=\"quantity-container\">\n        <Col>{quantity}</Col>\n      </Row>\n      <Row className=\"risk-container\">\n        <Col className=\"text-center\">\n          <Badge variant=\"danger\" className=\"m-1 my-3\">Risk: <big><strong>{maximumLoss}</strong></big></Badge>\n          {fields.targetPrice && fields.targetPrice > 0 && (\n            <>\n              <Badge variant=\"success\" className=\"m-1 my-3\">Reward: <big><strong>{Number(maximumProfit).toFixed(2)}</strong></big></Badge>\n              <Badge variant=\"warning\" className=\"m-1 my-3\">RRR: <big><strong>{Number(maximumProfit/maximumLoss).toFixed(1)}</strong></big></Badge>\n            </>\n          )}\n        </Col>\n      </Row>\n      <Form onSubmit={calculateQuantity}>\n        <Form.Row>\n          <Form.Group as={Col}>\n            <Form.Label>Capital</Form.Label>\n            <Form.Control\n              placeholder=\"Capital\"\n              size=\"lg\"\n              autoFocus\n              autoComplete=\"off\"\n              type=\"number\"\n              id=\"capital\"\n              value={fields.capital}\n              onChange={handleFieldChange}\n              required\n            />\n          </Form.Group>\n\n          <Form.Group as={Col}>\n            <Form.Label>Stop Loss % per Trade</Form.Label>\n            <Form.Control\n              placeholder=\"SL % per trade\"\n              size=\"lg\"\n              autoFocus\n              autoComplete=\"off\"\n              type=\"number\"\n              id=\"slPerTrade\"\n              value={fields.slPerTrade}\n              onChange={handleFieldChange}\n              required\n            />\n          </Form.Group>\n        </Form.Row>\n\n        <Form.Row>\n          <Form.Group as={Col}>\n            <Form.Label>Stop Loss</Form.Label>\n            <Form.Control\n              placeholder=\"Stop Loss\"\n              size=\"lg\"\n              autoFocus\n              autoComplete=\"off\"\n              type=\"number\"\n              id=\"stopLoss\"\n              value={fields.stopLoss}\n              onChange={handleFieldChange}\n              required\n            />\n          </Form.Group>\n\n          <Form.Group as={Col}>\n            <Form.Label>Entry Price</Form.Label>\n            <Form.Control\n              placeholder=\"Entry Price\"\n              size=\"lg\"\n              autoFocus\n              autoComplete=\"off\"\n              type=\"number\"\n              id=\"entryPrice\"\n              value={fields.entryPrice}\n              onChange={handleFieldChange}\n              required\n            />\n          </Form.Group>\n        </Form.Row>\n\n        <Form.Row>\n\n        <Form.Group as={Col}>\n            <Form.Label>Target</Form.Label>\n            <Form.Control\n              placeholder=\"Target Price\"\n              size=\"lg\"\n              autoFocus\n              autoComplete=\"off\"\n              type=\"number\"\n              id=\"targetPrice\"\n              value={fields.targetPrice}\n              onChange={handleFieldChange}\n              required\n            />\n          </Form.Group>\n\n          <Form.Group as={Col}>\n            <Form.Label>Trading Symbol</Form.Label>\n            <Form.Control\n              placeholder=\"STOCKNAME\"\n              size=\"lg\"\n              autoFocus\n              autoComplete=\"off\"\n              type=\"text\"\n              id=\"tradingSymbol\"\n              value={fields.tradingSymbol}\n              onChange={handleFieldChange}\n              required\n            />\n          </Form.Group>\n        </Form.Row>\n\n        {/* <Button size=\"lg\" variant=\"primary\" type=\"submit\">\n          Calculate Quantity\n        </Button> */}\n      </Form>\n\n      <br />\n      <form\n        method=\"post\"\n        id=\"coBasket-form\"\n        action=\"https://kite.zerodha.com/connect/basket\"\n        onSubmit={onBuyIntraday}\n        className=\"mr-3 mb-3 d-inline\"\n      >\n        <input type=\"hidden\" name=\"api_key\" value=\"59y2dm60w17qw3y4\" />\n        <Form.Control\n          type=\"hidden\"\n          id=\"coBasket\"\n          name=\"data\"\n          value={JSON.stringify(coBasket)}\n          required\n        />\n        <Button size=\"lg\" variant={buyOrSell === 'BUY' ? 'success' : 'danger'} type=\"submit\">\n          {buyOrSell} Intraday CO\n        </Button>\n      </form>\n\n      <form\n        method=\"post\"\n        id=\"boBasket-form\"\n        action=\"https://kite.zerodha.com/connect/basket\"\n        onSubmit={onBuyIntraday}\n        className=\"mr-3 mb-3 d-inline\"\n      >\n        <input type=\"hidden\" name=\"api_key\" value=\"59y2dm60w17qw3y4\" />\n        <Form.Control\n          type=\"hidden\"\n          id=\"boBasket\"\n          name=\"data\"\n          value={JSON.stringify(boBasket)}\n          required\n        />\n        <Button size=\"lg\" variant={buyOrSell === 'BUY' ? 'success' : 'danger'} type=\"submit\">\n          {buyOrSell} Intraday Bracket Order\n        </Button>\n      </form>\n\n      <form\n        method=\"post\"\n        id=\"moBasket-form\"\n        action=\"https://kite.zerodha.com/connect/basket\"\n        onSubmit={onBuyIntraday}\n        className=\"mr-3 mb-3 d-inline\"\n      >\n        <input type=\"hidden\" name=\"api_key\" value=\"59y2dm60w17qw3y4\" />\n        <Form.Control\n          type=\"hidden\"\n          id=\"moBasket\"\n          name=\"data\"\n          value={JSON.stringify(moBasket)}\n          required\n        />\n        <Button size=\"lg\" variant={buyOrSell === 'BUY' ? 'success' : 'danger'} type=\"submit\">\n          {buyOrSell} Market Order\n        </Button>\n      </form>\n      {/* <div className=\"mr-3 mb-3 d-inline\">\n        <Button size=\"lg\" variant=\"warning\" type=\"reset\" onClick={onResetForm}>\n          Reset Form\n        </Button>\n      </div> */}\n      \n    </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { Form, Row, Col, Button, Container, Badge } from 'react-bootstrap';\nimport Select from 'react-select'\nimport stocks from './stocks.json';\nimport zerodhaIds from './zerodhaIds.json';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst logR = d => {\n    console.log(JSON.stringify(d, null, 2));\n    return d;\n}\n\nexport function useFormFields(initialState) {\n    const [fields, setValues] = React.useState(initialState);\n\n    function setFormField(event) {\n        let idOrName;\n        let theValue;\n        if (Object.prototype.hasOwnProperty.call(event, 'target')) {\n            idOrName = event.target.type === \"radio\" ? event.target.name : event.target.id;\n            theValue = event.target.value;\n        } else {\n            idOrName = \"tradingSymbol\";\n            theValue = event.value;\n        }\n        setValues({\n            ...fields,\n            [idOrName]: theValue,\n        });\n    }\n\n    return [fields, setFormField];\n}\n\nfunction Cash() {\n\n    const location = useLocation();\n    const [quantity, setQuantity] = React.useState(0);\n    const [maximumLoss, setMaximumLoss] = React.useState(0);\n    const [maximumProfit, setMaximumProfit] = React.useState(0);\n    const [coBasket, setCoBasket] = React.useState([]);\n    const [boBasket, setBoBasket] = React.useState([]);\n    const [moBasket, setMoBasket] = React.useState([]);\n    const [loBasket, setLoBasket] = React.useState([]);\n    const [buyOrSell, setBuyOrSell] = React.useState('BUY');\n\n    const searchParams = new URLSearchParams(location.search);\n\n    const [entryPrice, setEntryPrice] = React.useState(searchParams.get(\"e\") || localStorage.getItem(\"entryPrice\") || 0);\n    const [targetPrice, setTargetPrice] = React.useState(searchParams.get(\"t\") || localStorage.getItem(\"targetPrice\") || 0);\n    const [slPrice, setSlPrice] = React.useState(searchParams.get(\"s\") || localStorage.getItem(\"slPrice\") || 0);\n    const [stopLoss, setStopLoss] = React.useState(searchParams.get(\"sl\") || localStorage.getItem(\"stopLoss\") || 0);\n\n    const [tradingSymbol, setTradingSymbol] = React.useState(searchParams.get(\"n\") || localStorage.getItem(\"tradingSymbol\") || \"\");\n    const [risk, setRisk] = React.useState(searchParams.get(\"r\") || localStorage.getItem(\"risk\") || 500);\n    const [riskPC, setRiskPerCent] = React.useState(searchParams.get(\"rpc\") || localStorage.getItem(\"riskPC\") || 0.5);\n    const [targetPC, setTargetPC] = React.useState(searchParams.get(\"tpc\") || localStorage.getItem(\"targetPC\") || 1);\n\n    \n    function calculateQuantity(e) {\n        if (e) {\n            e.preventDefault();\n        }\n\n        if (entryPrice) {\n            const slPrice = Number(entryPrice * (1 - riskPC/100)).toFixed(1);\n            const targetPrice = Number(entryPrice * (1 + targetPC/100)).toFixed(1);\n            const stopLoss = Number(entryPrice - slPrice).toFixed(1);\n            const target = Number(targetPrice - entryPrice).toFixed(1);\n            const quantity = Number(Math.round(500 / stopLoss)).toFixed(1);\n\n            const maxLoss = Number(stopLoss * quantity).toFixed(1);\n            const maxProfit = Number(target * quantity).toFixed(1);\n            setMaximumLoss(maxLoss);\n            setMaximumProfit(maxProfit);\n\n            setQuantity(quantity);\n            setSlPrice(slPrice);\n            setTargetPrice(targetPrice);\n            setStopLoss(stopLoss);\n            console.log({entryPrice, slPrice, targetPrice, quantity, maxLoss, maxProfit});\n\n        }\n    }\n\n    function onBuyIntraday(e) {\n        calculateQuantity();\n\n        localStorage.setItem('entryPrice', entryPrice);\n        localStorage.setItem('slPrice', slPrice);\n        localStorage.setItem('targetPrice', targetPrice);\n        localStorage.setItem('tradingSymbol', tradingSymbol);\n        localStorage.setItem('risk', risk);\n        localStorage.setItem('maximumLoss', maximumLoss);\n        localStorage.setItem('maximumProfit', maximumProfit);\n\n        \n    }\n\n    React.useEffect(() => {\n        console.log({tradingSymbol})\n        if (tradingSymbol) {\n            getLTP();\n        }\n    }, [tradingSymbol])\n\n    React.useEffect(() => {\n        calculateQuantity();\n    }, [entryPrice])\n\n\n    \n    function getLTP() {\n        const zerodhaId = zerodhaIds[tradingSymbol];\n        fetch(`http://localhost:4000/ltp/${zerodhaId}`)\n        .then(response => response.text())\n        .then(ltp => setEntryPrice(ltp))\n    }\n\n    function getTrailingSl(ltp) {\n        if (ltp < 100) {\n            return 1;\n        } else if (ltp < 200) {\n            return 1.5;\n        } else if (ltp < 400) {\n            return 2;\n        } else if (ltp < 600) {\n            return 2.5;\n        } else if (ltp < 800) {\n            return 3;\n        } else if (ltp < 1000) {\n            return 4;\n        } else {\n            return 5;\n        }\n    }\n\n    React.useEffect(() => {\n        const bos = (+slPrice < +entryPrice) ? 'BUY' : 'SELL';\n        const sob = bos === 'BUY' ? 'SELL' : 'BUY';\n\n        setBuyOrSell(bos);\n        calculateQuantity();\n\n        if (tradingSymbol) {\n            const stoploss = Math.abs((entryPrice - stopLoss));\n            const squareoff = Number(stoploss * 1.5).toFixed(1);\n\n            const co = [{\n                variety: 'co',\n                tradingsymbol: tradingSymbol,\n                exchange: 'NSE',\n                transaction_type: bos,\n                order_type: 'LIMIT',\n                product: 'MIS',\n                price: parseFloat(entryPrice),\n                quantity: +quantity,\n                stoploss: +stopLoss,\n                trigger_price: parseFloat(slPrice),\n                readonly: true,\n            }];\n            setCoBasket(co);\n\n            const bo = [{\n                tradingsymbol: tradingSymbol,\n                exchange: 'NSE',\n                transaction_type: bos,\n                order_type: 'LIMIT',\n                product: 'MIS',\n                price: parseFloat(entryPrice),\n                quantity: +quantity,\n                variety: 'bo',\n                stoploss: +stoploss,\n                squareoff: parseFloat(squareoff),\n                trailing_stoploss: getTrailingSl(entryPrice),\n                trigger_price: parseFloat(stopLoss),\n                readonly: true,\n            }];\n            setBoBasket(bo);\n\n            const lo = [\n                {\n                    exchange: 'NSE',\n                    tradingsymbol: tradingSymbol,\n                    quantity: +quantity,\n                    transaction_type: bos,\n                    product: 'MIS',\n                    order_type: \"LIMIT\",\n                    price: parseFloat(entryPrice),\n                    // trigger_price: parseFloat(entryPrice),\n                },\n                {\n                    tradingsymbol: tradingSymbol,\n                    exchange: 'NSE',\n                    transaction_type: sob,\n                    order_type: 'SL-M',\n                    product: 'MIS',\n                    price: parseFloat(slPrice),\n                    quantity: +quantity,\n                    trigger_price: parseFloat(slPrice),\n                },\n            ];\n\n            const mo = [\n                {\n                    exchange: 'NSE',\n                    tradingsymbol: tradingSymbol,\n                    quantity: +quantity,\n                    transaction_type: bos,\n                    product: 'MIS',\n                    order_type: \"SL-M\",\n                    price: parseFloat(entryPrice),\n                    trigger_price: parseFloat(entryPrice),\n                },\n                {\n                    tradingsymbol: tradingSymbol,\n                    exchange: 'NSE',\n                    transaction_type: sob,\n                    order_type: 'SL-M',\n                    product: 'MIS',\n                    price: parseFloat(stopLoss),\n                    quantity: +quantity,\n                    trigger_price: parseFloat(stopLoss),\n                },\n            ];\n            if (targetPrice > 0) {\n                const targetOrder = {\n                    exchange: 'NSE',\n                    tradingsymbol: tradingSymbol,\n                    quantity: +quantity,\n                    transaction_type: sob,\n                    product: 'MIS',\n                    order_type: \"LIMIT\",\n                    price: parseFloat(targetPrice),\n                    trigger_price: parseFloat(targetPrice),\n                };\n                mo.push(targetOrder);\n                lo.push(targetOrder);\n            }\n            setMoBasket(mo);\n            setLoBasket(lo);\n\n            console.log({lo, co})\n        }\n    }, [entryPrice, slPrice, targetPrice, stopLoss]);\n\n    return (\n        <Container className=\"Cash\">\n            <Row className=\"quantity-container\">\n                <Col>Equity</Col>\n            </Row>\n            <Row className=\"risk-container\">\n                <Col className=\"text-center\">\n                    <Badge variant=\"danger\" className=\"m-1 my-3\">Risk: <big><strong>{maximumLoss} ({slPrice})</strong></big></Badge>\n                    {targetPrice && targetPrice > 0 && (\n                        <>\n                            <Badge variant=\"success\" className=\"m-1 my-3\">Reward: <big><strong>{Number(maximumProfit).toFixed(2)} ({targetPrice})</strong></big></Badge>\n                            <Badge variant=\"warning\" className=\"m-1 my-3\">RRR: <big><strong>{Number(maximumProfit / maximumLoss).toFixed(1)}</strong></big></Badge>\n                        </>\n                    )}\n                    {/* <Badge variant=\"info\" className=\"m-1 my-3\">Quantity: <big><strong>{quantity}</strong></big></Badge> */}\n                </Col>\n            </Row>\n\n            <Form onSubmit={calculateQuantity}>\n                <Form.Row>\n                    <Form.Group as={Col}>\n                        <Form.Label>Trading Symbol</Form.Label>\n                        <Select\n                            options={stocks}\n                            id=\"tradingSymbol\"\n                            // value={tradingSymbol}\n                            onChange={o => setTradingSymbol(o.value)}\n                        />\n                    </Form.Group>\n\n                    <Form.Group as={Col}>\n                        <Form.Label>Entry Price</Form.Label>\n                        <Form.Control\n                            placeholder=\"Entry Price\"\n                            size=\"lg\"\n                            autoFocus\n                            autoComplete=\"off\"\n                            type=\"number\"\n                            id=\"entryPrice\"\n                            value={entryPrice}\n                            onChange={e => +e.target.value && setEntryPrice(e.target.value)}\n                            step=\"0.1\"\n                            required\n                        />\n                    </Form.Group>\n\n                    <Form.Group as={Col}>\n                        <Form.Label>Quantity</Form.Label>\n                        <Form.Control\n                            placeholder=\"Quantity\"\n                            size=\"lg\"\n                            autoFocus\n                            autoComplete=\"off\"\n                            type=\"number\"\n                            id=\"quantity\"\n                            value={quantity}\n                            onChange={e => setQuantity(e.target.value)}\n                            required\n                        />\n                    </Form.Group>\n                </Form.Row>\n            </Form>\n                    <Col>\n                        <form\n                            method=\"post\"\n                            id=\"moBasket-form\"\n                            action=\"https://kite.zerodha.com/connect/basket\"\n                            onSubmit={onBuyIntraday}\n                            className=\" mt-4 d-inline\"\n                        >\n                            <input type=\"hidden\" name=\"api_key\" value=\"59y2dm60w17qw3y4\" />\n                            <Form.Control\n                                type=\"hidden\"\n                                id=\"moBasket\"\n                                name=\"data\"\n                                value={JSON.stringify(loBasket)}\n                                required\n                            />\n                            <Button className=\"m-4\" size=\"lg\" variant={buyOrSell === 'BUY' ? 'success' : 'danger'} type=\"submit\">\n                                Limit\n                            </Button>\n                        </form>\n                    \n                        <form\n                            method=\"post\"\n                            id=\"coBasket-form\"\n                            action=\"https://kite.zerodha.com/connect/basket\"\n                            onSubmit={onBuyIntraday}\n                            className=\" mt-4 d-inline\"\n                        >\n                            <input type=\"hidden\" name=\"api_key\" value=\"59y2dm60w17qw3y4\" />\n                            <Form.Control\n                                type=\"hidden\"\n                                id=\"coBasket\"\n                                name=\"data\"\n                                value={JSON.stringify(coBasket)}\n                                required\n                            />\n                            <Button className=\"m-4\" size=\"lg\" variant={buyOrSell === 'BUY' ? 'success' : 'danger'} type=\"submit\">\n                                Cover\n                            </Button>\n                        </form>\n                    </Col>\n                \n            \n\n        </Container>\n    );\n}\n\nexport default Cash;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from \"react-dom\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\nimport Cash from './Cash';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <Switch>\n          <Route exact path=\"/\">\n            <Cash />\n          </Route>\n          <Route path=\"/cas\">\n            <App />\n          </Route>\n          {/* <Route path=\"/future\">\n            <Future />\n          </Route> */}\n        </Switch>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}