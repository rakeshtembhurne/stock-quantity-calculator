{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","location","useLocation","React","useState","quantity","setQuantity","basket","setBasket","buyOrSell","setBuyOrSell","searchParams","URLSearchParams","search","initialState","fields","setValues","event","idOrName","target","type","name","id","value","useFormFields","capital","get","entryPrice","slPerTrade","stopLoss","tradingSymbol","handleFieldChange","calculateQuantity","e","preventDefault","maxLoss","Math","abs","round","console","log","useEffect","bos","b","variety","tradingsymbol","exchange","transaction_type","order_type","product","price","parseFloat","stoploss","trigger_price","readonly","Container","className","Row","Col","Form","onSubmit","Group","as","Label","Control","placeholder","size","autoFocus","autoComplete","onChange","required","Button","variant","method","action","JSON","stringify","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f8e5bda7.chunk.js","sourcesContent":["import React from 'react';\nimport { useLocation } from 'react-router-dom';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Form, Row, Col, Button, Container } from 'react-bootstrap';\n\nexport function useFormFields(initialState) {\n  const [fields, setValues] = React.useState(initialState);\n\n  function setFormField(event) {\n    const idOrName =\n      event.target.type === \"radio\" ? event.target.name : event.target.id;\n\n    setValues({\n      ...fields,\n      [idOrName]: event.target.value,\n    });\n  }\n\n  return [fields, setFormField];\n}\n\nfunction App() {\n\n  const location = useLocation();\n  const [quantity, setQuantity] = React.useState(0);\n  const [basket, setBasket] = React.useState([]);\n  const [buyOrSell, setBuyOrSell] = React.useState('BUY');\n\n  const searchParams = new URLSearchParams(location.search);\n  const [fields, handleFieldChange] = useFormFields({\n    capital: searchParams.get(\"c\") || 200000,\n    entryPrice: searchParams.get(\"e\") || 0,\n    slPerTrade: searchParams.get(\"slpt\") || 2,\n    stopLoss: searchParams.get(\"sl\") || 0,\n    tradingSymbol: searchParams.get(\"n\") || \"\",\n  });\n\n  function calculateQuantity(e) {\n    if (e) {\n      e.preventDefault();\n    }\n\n    if (fields.capital && fields.entryPrice && fields.slPerTrade && fields.stopLoss) {\n      const maxLoss = ((fields.capital * fields.slPerTrade) / 100);\n      const stopLoss = Math.abs((fields.entryPrice - fields.stopLoss));\n      const quantity =  Math.round(maxLoss / stopLoss);\n      console.log({maxLoss, stopLoss, quantity});\n      setQuantity(quantity);\n    }\n  }\n\n  function onBuyIntraday(e) {\n    calculateQuantity();\n  }\n\n  React.useEffect(() => {\n    const bos = (fields.stopLoss < fields.entryPrice) ? 'BUY' : 'SELL';\n    setBuyOrSell(bos);\n\n    if (fields.tradingSymbol) {\n      const b = [{\n        variety: 'co',\n        tradingsymbol: fields.tradingSymbol,\n        exchange: 'NSE',\n        transaction_type: bos,\n        order_type: 'LIMIT',\n        product: 'MIS',\n        price: parseFloat(fields.entryPrice),\n        quantity: quantity,\n        stoploss: Math.abs((fields.entryPrice - fields.stopLoss)),\n        trigger_price: parseFloat(fields.stopLoss),\n        readonly: true,\n      }];\n      setBasket(b);\n    }\n  }, [fields.tradingSymbol, fields.entryPrice, fields.stopLoss, quantity, fields.capital, fields.slPerTrade]);\n\n  return (\n    <Container className=\"App\">\n      <Row className=\"quantity-container\">\n        <Col>{quantity}</Col>\n      </Row>\n      <Form onSubmit={calculateQuantity}>\n        <Form.Row>\n          <Form.Group as={Col}>\n            <Form.Label>Capital</Form.Label>\n            <Form.Control\n              placeholder=\"Capital\"\n              size=\"lg\"\n              autoFocus\n              autoComplete=\"off\"\n              type=\"number\"\n              id=\"capital\"\n              value={fields.capital}\n              onChange={handleFieldChange}\n              required\n            />\n          </Form.Group>\n\n          <Form.Group as={Col}>\n            <Form.Label>Stop Loss % per Trade</Form.Label>\n            <Form.Control\n              placeholder=\"SL % per trade\"\n              size=\"lg\"\n              autoFocus\n              autoComplete=\"off\"\n              type=\"number\"\n              id=\"slPerTrade\"\n              value={fields.slPerTrade}\n              onChange={handleFieldChange}\n              required\n            />\n          </Form.Group>\n        </Form.Row>\n\n        <Form.Row>\n          <Form.Group as={Col}>\n            <Form.Label>Entry Price</Form.Label>\n            <Form.Control\n              placeholder=\"Entry Price\"\n              size=\"lg\"\n              autoFocus\n              autoComplete=\"off\"\n              type=\"number\"\n              id=\"entryPrice\"\n              value={fields.entryPrice}\n              onChange={handleFieldChange}\n              required\n            />\n          </Form.Group>\n\n          <Form.Group as={Col}>\n            <Form.Label>Stop Loss</Form.Label>\n            <Form.Control\n              placeholder=\"Capital\"\n              size=\"lg\"\n              autoFocus\n              autoComplete=\"off\"\n              type=\"number\"\n              id=\"stopLoss\"\n              value={fields.stopLoss}\n              onChange={handleFieldChange}\n              required\n            />\n          </Form.Group>\n        </Form.Row>\n\n        <Form.Row>\n          <Form.Group as={Col}>\n            <Form.Label>Trading Symbol</Form.Label>\n            <Form.Control\n              placeholder=\"STOCKNAME\"\n              size=\"lg\"\n              autoFocus\n              autoComplete=\"off\"\n              type=\"text\"\n              id=\"tradingSymbol\"\n              value={fields.tradingSymbol}\n              onChange={handleFieldChange}\n              required\n            />\n          </Form.Group>\n        </Form.Row>\n\n        <Button size=\"lg\" variant=\"primary\" type=\"submit\">\n          Calculate Quantity\n        </Button>\n      </Form>\n\n      <br />\n      <form\n        method=\"post\"\n        id=\"basket-form\"\n        action=\"https://kite.zerodha.com/connect/basket\"\n        onSubmit={onBuyIntraday}\n      >\n        <input type=\"hidden\" name=\"api_key\" value=\"59y2dm60w17qw3y4\" />\n        <Form.Control\n          type=\"hidden\"\n          id=\"basket\"\n          name=\"data\"\n          value={JSON.stringify(basket)}\n          required\n        />\n        <Button size=\"lg\" variant={buyOrSell === 'BUY' ? 'success' : 'danger'} type=\"submit\">\n          {buyOrSell} Intraday CO\n        </Button>\n      </form>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from \"react-dom\";\nimport {\n  BrowserRouter as Router,\n  // Switch,\n  // useLocation\n} from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}